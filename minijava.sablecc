Package
  minijava;
Helpers
  unicode_input_character = [0..0xffff];
  ht                      = 0x0009; // horizontal tab
  lf                      = 0x000a; // line feed or newline
  ff                      = 0x000c; // form feed, or page break
  cr                      = 0x000d; // carriage return
  sp                      = ' ';    // space
  line_terminator         = lf | cr | cr lf;
  input_character         = [unicode_input_character - [cr + lf]];
  not_star                = [input_character - '*'] | line_terminator;
  not_star_not_slash      = [input_character - ['*' + '/']] | line_terminator;
  digit                   = ['0'..'9'];
  letter                  = ['a'..'z'] | ['A'..'Z'];
Tokens
  // KEYWORDS
  klass                   = 'class';
  public                  = 'public';
  static                  = 'static';
  void                    = 'void';
  main                    = 'main';
  extends                 = 'extends';
  if                      = 'if';
  else                    = 'else';
  while                   = 'while';
  this                    = 'this';
  super                   = 'super';
  new                     = 'new';
  print                   = 'System.out.println';
  int                     = 'int';
  boolean                 = 'boolean';
  string                  = 'String';
  return                  = 'return';

  // BRACES
  lparen                  = '(';
  rparen                  = ')';
  lbrace                  = '{';
  rbrace                  = '}';
  lbracket                = '[';
  rbracket                = ']';

  // OPERATORS
  plus                    = '+';
  minus                   = '-';
  mult                    = '*';
  and                     = '&&';
  not                     = '!';
  less                    = '<';
  length                  = 'length';

  // OTHERS
  assign                  = '=';
  semicolon               = ';';
  comma                   = ',';
  dot                     = '.';

  // LITERALS
  int_literal             = digit+;
  true                    = 'true';
  false                   = 'false';
  id                      = letter (letter | '_' | digit)*;

  // WS
  white_space             = (sp | ht | ff | line_terminator)*;
  traditional_comment     = '/*' not_star+ '*'+ (not_star_not_slash not_star* '*'+)* '/';
  documentation_comment   = '/**' '*'* (not_star_not_slash not_star* '*'+)* '/';
  end_of_line_comment     = '//' input_character* line_terminator?;

Ignored Tokens
  white_space, traditional_comment, documentation_comment, end_of_line_comment;


/**********************************************************************
 *
 *  Productions
 *
 *********************************************************************/

Productions

program =
    [main_class]:main_class class_decl*
    {-> New program(main_class, [class_decl])};

main_class =
    klass [name]:identifier
    [class_begin]:lbrace
        public static void main
            lparen string lbracket rbracket [method_parameter]:identifier rparen
        [method_begin]:lbrace
            [statement]:statement
        [method_end]:rbrace
    [class_end]:rbrace
    {-> New main_class(name, method_parameter, statement)};

class_decl =
    klass [name]:identifier class_extention?
    lbrace
        [variables]:variable_declaration*
        [methods]:method_declaration*
    rbrace
    {-> New class_decl.simple(name, [variables], [methods])}; // TODO extends

class_extention =
  extends [parent]:identifier;

method_declaration =
    public [return_type]:type [name]:identifier
        lparen [formals]:formal_parameter_list? rparen
    lbrace
        [locals]:variable_declaration*
        [statements]:statement*
        return [return_expression]:expression semicolon
    rbrace
    {-> New method_declaration(return_type, name, [formals.formal_parameter], [locals], [statements], return_expression)};

variable_declaration =
    [type]:type [name]:identifier semicolon
    {-> New variable_declaration(type, name)};

formal_parameter_list {-> formal_parameter* } =
    {formal_parameter}
      formal_parameter
      {-> [formal_parameter.formal_parameter] } |
    {formal_parameters}
      formal_parameter_list comma formal_parameter
      {-> [formal_parameter_list.formal_parameter, formal_parameter.formal_parameter] };

formal_parameter =
    [type]:type [name]:identifier
    {-> New formal_parameter(type, name)};

type =
    {int}
      int
      {-> New type.int(int)} |
    {int_array}
      int lbracket rbracket
      {-> New type.int_array(int)} |
    {boolean}
      boolean
      {-> New type.boolean(boolean)} |
    {identifier}
      identifier
      {-> New type.identifier(identifier)};

statement =
    {without_trailing_substatement}
      statement_without_trailing_substatement
      {-> statement_without_trailing_substatement.statement} |
    {if_else}
      if lparen [condition]:expression rparen
        [true_statement]:statement
      else
        [false_statement]:statement
      {-> New statement.if(condition, true_statement, false_statement)} |
    {while}
      while lparen [condition]:expression rparen [statement]:statement
      {-> New statement.while(condition, statement)};

statement_without_trailing_substatement {->statement} =
    {block}
      lbrace [statements]:statement* rbrace
      {-> New statement.block([statements])} |
    {print}
      print lparen [value]:expression rparen semicolon
      {-> New statement.println(value)} |
    {assign}
      [name]:identifier assign [value]:expression semicolon
      {-> New statement.assign(name, value)} |
    {array_assign}
      [name]:identifier lbracket [index]:expression rbracket assign [value]:expression semicolon
      {-> New statement.array_assign(name, index, value)};

expression_list {-> expression*} =
    {expression}
      expression
      {-> [expression.expression]} |
    {expressions}
      expression_list comma expression
      {-> [expression_list.expression, expression.expression]};

expression =
    conditional_or_expression
    {-> conditional_or_expression.expression};

conditional_or_expression {-> expression} =
    {and}
      conditional_and_expression
      {-> conditional_and_expression.expression};

conditional_and_expression {-> expression} =
    {comparative}
      comparative_expression
      {-> comparative_expression.expression} |
    {and}
      [left]:conditional_and_expression and [right]:comparative_expression
      {-> New expression.and(left.expression, right.expression)};

comparative_expression {-> expression} =
    {relational}
      relational_expression
      {-> relational_expression.expression};

relational_expression {-> expression} =
    {additive}
      additive_expression
      {-> additive_expression.expression } |
    {less_than}
      [left]:relational_expression less [right]:additive_expression
      {-> New expression.less_than(left.expression, right.expression)};

additive_expression {-> expression} =
    {multiplicative}
      multiplicative_expression
      {-> multiplicative_expression.expression} |
    {plus}
      [left]:additive_expression plus [right]:multiplicative_expression
      {-> New expression.plus(left.expression, right.expression)} |
    {minus}
      [left]:additive_expression minus [right]:multiplicative_expression
      {-> New expression.minus(left.expression, right.expression)};

multiplicative_expression {-> expression} =
    {unary}
      unary_expression
      {-> unary_expression.expression} |
    {mult}
      [left]:multiplicative_expression mult [right]:unary_expression
      {-> New expression.times(left.expression, right.expression)};

unary_expression {-> expression} =
    {primary}
      primary_expression
      {-> primary_expression.expression} |
    {negation}
      not unary_expression
      {-> New expression.not(unary_expression.expression)};

primary_expression {-> expression} =
    {new_int_array}
      new int lbracket [size]:expression rbracket
      {-> New expression.new_array(size)} |
    {primary_no_new_array}
      primary_no_new_array_expression
      {-> primary_no_new_array_expression.expression};

primary_no_new_array_expression {-> expression} =
    {literal}
      literal_expression
      {-> literal_expression.expression} |
    {identifier}
      identifier
      {-> New expression.identifier(identifier)} |
    {this}
      this
      {-> New expression.this(this)} |
    {new_instance}
      new [class_name]:identifier lparen rparen
      {-> New expression.new_object(class_name)} |
    {array_length}
      [array]:primary_expression dot length
      {-> New expression.array_length(array.expression)} |
    {array_access}
      [array]:primary_no_new_array_expression lbracket [index]:expression rbracket
      {-> New expression.array_lookup(array.expression, index)} |
    {method_invocation}
      [instance]:primary_expression dot [name]:identifier lparen [actuals]:expression_list? rparen
      {-> New expression.call(instance.expression, name, [actuals.expression])} |
    {expression}
      lparen expression rparen
      {-> expression};

literal_expression {-> expression} =
    {integer}
      int_literal
      {-> New expression.integer(int_literal)} |
    {true}
      true
      {-> New expression.true(true)} |
    {false}
      false
      {-> New expression.false(false)};

identifier =
  id;


/**********************************************************************
 *
 *  Abstract Syntax Tree
 *
 *********************************************************************/


Abstract Syntax Tree
program =
    [main_class]:main_class
    [class_decl]:class_decl*;

main_class =
    [name]:identifier
    [method_parameter]:identifier
    [statement]:statement;

class_decl =
    {extends}
      [name]:identifier
      [parent]:identifier
      [variables]:variable_declaration*
      [methods]:method_declaration* |
    {simple}
      [name]:identifier
      [variables]:variable_declaration*
      [methods]:method_declaration*;

method_declaration =
    [return_type]:type
    [name]:identifier
    [formals]:formal_parameter*
    [locals]:variable_declaration*
    [statements]:statement*
    [return_expression]:expression;

variable_declaration =
    [type]:type
    [name]:identifier;

formal_parameter =
    [type]:type
    [name]:identifier;

type =
    {int}
      [name]:int |
    {int_array}
      [name]:int |
    {boolean}
      [name]:boolean |
    {identifier}
      [name]:identifier;

statement =
    {block}
      [statements]:statement* |
    {if}
      [condition]:expression
      [true_statement]:statement
      [false_statement]:statement |
    {while}
      [condition]:expression
      [statement]:statement |
    {println}
      [value]:expression |
    {assign}
      [name]:identifier
      [value]:expression |
    {array_assign}
      [name]:identifier
      [index]:expression
      [value]:expression;

expression =
    {and}
      [left]:expression
      [right]:expression |
    {less_than}
      [left]:expression
      [right]:expression |
    {plus}
      [left]:expression
      [right]:expression |
    {minus}
      [left]:expression
      [right]:expression |
    {times}
      [left]:expression
      [right]:expression |
    {array_lookup}
      [array]:expression
      [index]:expression |
    {array_length}
      [array]:expression |
    {call}
      [instance]:expression
      [name]:identifier
      [actuals]:expression* |
    {integer}
      [value]:int_literal |
    {true}
      true |
    {false}
      false |
    {identifier}
      [name]:identifier |
    {this}
      this |
    {new_array}
      [size]:expression |
    {new_object}
      [class_name]:identifier |
    {not}
      [expression]:expression;

identifier =
  [name]: id;
